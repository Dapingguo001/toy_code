classdef KFAgent < BasicAgent
    properties
        orient = 0;   % the orientation of the agent
        A = 0;
        H = eye(4);
        z = zeros(4,1);          % 
        ix = zeros(4,1);;                % internal state
        update_ix = zeros(4,1);;         % internal state after process update
        P = 0;                 % process covariance
        update_P = 0;          % process covariance after process update
        
        q = 0.1;  % process noise
        r = 1;    % measurement noise
        R = eye(4);
        
        total_agent = 0;
        
        is_in_view = 0;
        is_filter_init = 0;
        is_CF_filter_init = 0;
        
        percept_d = 0;  % perception distance, beyond this distance KFAgent cannot see percepted_agent
        
        data_CF = 0; 
        covariance_CF = 0;  
        input_data_CF = 0;  
        input_covariance_CF = 0; 
        
        state_sum = 0;
        num_neighbour = 0;
        
    end
    
    methods
        
      % constructor
      function obj = KFAgent(pos,vel,orient, percept_d, total_agent)
          %init KF related variable
          
          obj = obj@BasicAgent(pos,vel);
          obj.orient = orient;
          obj.percept_d = percept_d;
          obj.total_agent = total_agent;
          
          obj.R = obj.r*eye(4);
          obj.P = obj.total_agent*eye(4);
          
          obj.data_CF = zeros(4,1);
          obj.input_data_CF = zeros(4,1);
          obj.covariance_CF = eye(4);
          obj.input_covariance_CF = eye(4);
          
      end
      
      % update consensus filter (Distributed Kalman Filtering for Sensor Networks, Algorithm 1)
      function obj = updateCF(obj,neighborMsg)
          % neighborMsg {{neighbor1},{neighbor2},{neighbor3}}
          % For Algorithm 1,
          % neighbor1 ={data_CF, covariance_CF, input_data_CF, input_covariance_CF}
          % For Algorithm 2,
          % neighbor1 ={input_data_CF, input_covariance_CF, state}
          
          step_size = 0.01;  % may need to tune this parameter
          
          if obj.is_in_view == 1
            obj.input_data_CF = obj.H'*inv(obj.R)*obj.z;  % otherwise keep its old value
%             if obj.is_CF_filter_init == 0
%                 obj.data_CF = obj.input_data_CF;
%                 obj.is_CF_filter_init = 1;
%             end
          end
          obj.input_covariance_CF = obj.H'*inv(obj.R)*obj.H;
          
          data_sum = 0;
          covariance_sum = 0;
          obj.state_sum = 0;
          obj.num_neighbour = 0;
          for i = 1:size(neighborMsg,2)
%               if neighborMsg{i}{5} == 1
%                 data_sum = data_sum + neighborMsg{i}{1} - obj.data_CF + neighborMsg{i}{3} - obj.input_data_CF;
%                 covariance_sum = covariance_sum + neighborMsg{i}{2} - obj.covariance_CF + neighborMsg{i}{4} - obj.input_covariance_CF;
%               end
                if neighborMsg{i}{4} == 1
                    data_sum = data_sum + neighborMsg{i}{1};
                    covariance_sum = covariance_sum + neighborMsg{i}{2};
                    obj.state_sum = obj.state_sum + neighborMsg{i}{3};
                    obj.num_neighbour = obj.num_neighbour + 1;
                end
          end
          
%           obj.data_CF = obj.data_CF + step_size * data_sum;
%           obj.covariance_CF = obj.covariance_CF + step_size * covariance_sum;
          if obj.is_filter_init == 1
            obj.data_CF = obj.input_data_CF + data_sum;
            obj.covariance_CF = obj.input_covariance_CF + covariance_sum;
          else
            obj.data_CF = data_sum;
            obj.covariance_CF = covariance_sum;  
          end
          
          
      end
      
      function msg = getCFMsg(obj)
          msg = {};
%           msg{1} = obj.data_CF;
%           msg{2} = obj.covariance_CF;
          msg{1} = obj.input_data_CF;
          msg{2} = obj.input_covariance_CF;
          msg{3} = obj.ix;
          msg{4} = obj.is_filter_init;
      end
      
      function obj = sim(obj, dt)
%           if obj.is_filter_init == 0
%               
%               obj = sim@BasicAgent(obj, dt);
%               return
%           else
              
              obj.A = [1 0 dt  0;
                        0 1  0 dt;
                        0 0  1  0;
                        0 0  0  1];
              if obj.num_neighbour > 0
              	S = obj.covariance_CF;% + obj.input_covariance_CF;
                y = obj.data_CF;% + obj.input_data_CF;
                M = inv(inv(obj.P) + S);
                obj.update_ix =  obj.ix + M * (y - M *obj.ix) + 0.1*M*(obj.state_sum - obj.num_neighbour*obj.ix);
                obj.P = obj.A * M * obj.A';               
                obj.ix = obj.A * obj.update_ix;      % does not exactly follow the KF I have learnt before
              else
              
              %obj.update_P = obj.A * obj.P * obj.A';
               
              obj = sim@BasicAgent(obj, dt);
%           end
           
          
      end
      
      function obj = observe(obj, percepted_agent)
          d = agentDist(obj, percepted_agent);
          
          if d <= obj.percept_d
              
              obj.is_in_view = 1;
              if obj.is_filter_init == 0
              % saw target first time, init filter to start filtering
                  obj.is_filter_init = 1;
                  obj.ix = [percepted_agent.px;
                            percepted_agent.py;
                            percepted_agent.vx;
                            percepted_agent.vy] + obj.r*randn(4,1);  
                  obj.z = [percepted_agent.px;
                            percepted_agent.py;
                            percepted_agent.vx;
                            percepted_agent.vy] + obj.r*randn(4,1);  
                  obj.P = obj.total_agent*eye(4);
              else
                  obj.z = [percepted_agent.px;
                            percepted_agent.py;
                            percepted_agent.vx;
                            percepted_agent.vy] + obj.r*randn(4,1);
              end
          else
              obj.is_in_view = 0;
          end
      end
      
    end
end